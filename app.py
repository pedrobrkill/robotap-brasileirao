import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import random

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Robo Tap Brasil - An√°lise de Apostas",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 1rem;
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        margin: 0.5rem 0;
    }
    
    .game-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e9ecef;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .prediction-high {
        color: #28a745;
        font-weight: bold;
    }
    
    .prediction-medium {
        color: #ffc107;
        font-weight: bold;
    }
    
    .prediction-low {
        color: #dc3545;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√£o para gerar dados fict√≠cios de jogos
@st.cache_data
def generate_sample_games():
    teams = [
        "Flamengo", "Palmeiras", "S√£o Paulo", "Corinthians", "Atl√©tico-MG",
        "Internacional", "Gr√™mio", "Botafogo", "Vasco", "Fluminense",
        "Santos", "Cruzeiro", "Bahia", "Fortaleza", "Athletico-PR"
    ]
    
    leagues = ["Brasileir√£o", "Copa do Brasil", "Libertadores", "Sul-Americana"]
    
    games = []
    for i in range(20):
        home_team = random.choice(teams)
        away_team = random.choice([t for t in teams if t != home_team])
        
        # Gerar odds realistas
        home_odds = round(random.uniform(1.5, 4.0), 2)
        draw_odds = round(random.uniform(2.5, 3.8), 2)
        away_odds = round(random.uniform(1.5, 4.0), 2)
        
        # Calcular probabilidades impl√≠citas
        home_prob = round((1/home_odds) * 100, 1)
        draw_prob = round((1/draw_odds) * 100, 1)
        away_prob = round((1/away_odds) * 100, 1)
        
        # Previs√£o da IA (simulada)
        predictions = ["Casa", "Empate", "Visitante"]
        ai_prediction = random.choice(predictions)
        confidence = round(random.uniform(60, 95), 1)
        
        game = {
            "Data": datetime.now() + timedelta(days=random.randint(0, 7)),
            "Liga": random.choice(leagues),
            "Casa": home_team,
            "Visitante": away_team,
            "Odds Casa": home_odds,
            "Odds Empate": draw_odds,
            "Odds Visitante": away_odds,
            "Prob Casa (%)": home_prob,
            "Prob Empate (%)": draw_prob,
            "Prob Visitante (%)": away_prob,
            "Previs√£o IA": ai_prediction,
            "Confian√ßa (%)": confidence
        }
        games.append(game)
    
    return pd.DataFrame(games)

# Fun√ß√£o para gerar estat√≠sticas da IA
@st.cache_data
def generate_ai_stats():
    return {
        "taxa_acerto": 73.5,
        "jogos_analisados": 1247,
        "lucro_mes": 12.8,
        "melhor_liga": "Brasileir√£o"
    }

# T√≠tulo principal
st.markdown("""
<div class="main-header">
    <h1>ü§ñ Robo Tap Brasil - An√°lise Inteligente de Apostas</h1>
    <p>Previs√µes esportivas baseadas em Intelig√™ncia Artificial</p>
</div>
""", unsafe_allow_html=True)

# Sidebar
st.sidebar.header("‚öôÔ∏è Filtros")
selected_league = st.sidebar.selectbox("Liga", ["Todas", "Brasileir√£o", "Copa do Brasil", "Libertadores", "Sul-Americana"])
selected_date = st.sidebar.date_input("Data", datetime.now().date())
confidence_filter = st.sidebar.slider("Confian√ßa M√≠nima (%)", 50, 95, 70)

# Carregar dados
games_df = generate_sample_games()
ai_stats = generate_ai_stats()

# Filtrar dados
if selected_league != "Todas":
    games_df = games_df[games_df["Liga"] == selected_league]

games_df = games_df[games_df["Confian√ßa (%)"] >= confidence_filter]

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Taxa de Acerto", f"{ai_stats['taxa_acerto']}%", "2.1%")

with col2:
    st.metric("Jogos Analisados", f"{ai_stats['jogos_analisados']:,}", "127")

with col3:
    st.metric("ROI Mensal", f"{ai_stats['lucro_mes']}%", "1.2%")

with col4:
    st.metric("Melhor Liga", ai_stats['melhor_liga'], "")

# Separador
st.markdown("---")

# Abas principais
tab1, tab2, tab3, tab4 = st.tabs(["üèÜ Jogos do Dia", "üìä An√°lise Detalhada", "üìà Estat√≠sticas", "üéØ Dicas VIP"])

with tab1:
    st.header("üèÜ Jogos do Dia - Previs√µes da IA")
    
    if len(games_df) > 0:
        # Ordenar por confian√ßa
        games_sorted = games_df.sort_values("Confian√ßa (%)", ascending=False)
        
        for idx, game in games_sorted.iterrows():
            with st.container():
                col1, col2, col3 = st.columns([3, 2, 2])
                
                with col1:
                    st.markdown(f"""
                    <div class="game-card">
                        <h4>{game['Casa']} vs {game['Visitante']}</h4>
                        <p><strong>Liga:</strong> {game['Liga']}</p>
                        <p><strong>Data:</strong> {game['Data'].strftime('%d/%m/%Y')}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("**Odds:**")
                    st.write(f"Casa: {game['Odds Casa']}")
                    st.write(f"Empate: {game['Odds Empate']}")
                    st.write(f"Visitante: {game['Odds Visitante']}")
                
                with col3:
                    confidence_class = "prediction-high" if game['Confian√ßa (%)'] >= 80 else "prediction-medium" if game['Confian√ßa (%)'] >= 70 else "prediction-low"
                    
                    st.markdown(f"""
                    <div class="{confidence_class}">
                        <strong>Previs√£o IA:</strong> {game['Previs√£o IA']}<br>
                        <strong>Confian√ßa:</strong> {game['Confian√ßa (%)']}%
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("---")
    else:
        st.warning("Nenhum jogo encontrado com os filtros aplicados.")

with tab2:
    st.header("üìä An√°lise Detalhada")
    
    if len(games_df) > 0:
        # Gr√°fico de distribui√ß√£o de odds
        fig = px.histogram(games_df, x="Odds Casa", nbins=20, title="Distribui√ß√£o das Odds para Casa")
        st.plotly_chart(fig, use_container_width=True)
        
        # Gr√°fico de confian√ßa por liga
        confidence_by_league = games_df.groupby("Liga")["Confian√ßa (%)"].mean().reset_index()
        fig2 = px.bar(confidence_by_league, x="Liga", y="Confian√ßa (%)", title="Confian√ßa M√©dia por Liga")
        st.plotly_chart(fig2, use_container_width=True)
        
        # Tabela detalhada
        st.subheader("Tabela Completa")
        st.dataframe(games_df.style.format({
            "Odds Casa": "{:.2f}",
            "Odds Empate": "{:.2f}",
            "Odds Visitante": "{:.2f}",
            "Prob Casa (%)": "{:.1f}%",
            "Prob Empate (%)": "{:.1f}%",
            "Prob Visitante (%)": "{:.1f}%",
            "Confian√ßa (%)": "{:.1f}%"
        }))

with tab3:
    st.header("üìà Estat√≠sticas da IA")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Performance Geral")
        
        # Gr√°fico de pizza - distribui√ß√£o de previs√µes
        prediction_counts = games_df["Previs√£o IA"].value_counts()
        fig = px.pie(values=prediction_counts.values, names=prediction_counts.index, 
                    title="Distribui√ß√£o das Previs√µes")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("Confian√ßa por Tipo de Previs√£o")
        
        confidence_by_prediction = games_df.groupby("Previs√£o IA")["Confian√ßa (%)"].mean().reset_index()
        fig = px.bar(confidence_by_prediction, x="Previs√£o IA", y="Confian√ßa (%)", 
                    title="Confian√ßa M√©dia por Tipo de Previs√£o")
        st.plotly_chart(fig, use_container_width=True)
    
    # M√©tricas adicionais
    st.subheader("M√©tricas Avan√ßadas")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        avg_confidence = games_df["Confian√ßa (%)"].mean()
        st.metric("Confian√ßa M√©dia", f"{avg_confidence:.1f}%")
    
    with col2:
        high_confidence_games = len(games_df[games_df["Confian√ßa (%)"] >= 80])
        st.metric("Jogos Alta Confian√ßa", high_confidence_games)
    
    with col3:
        avg_odds = games_df["Odds Casa"].mean()
        st.metric("Odds M√©dia Casa", f"{avg_odds:.2f}")

with tab4:
    st.header("üéØ Dicas VIP")
    
    st.warning("‚ö†Ô∏è Esta se√ß√£o est√° dispon√≠vel apenas para assinantes VIP")
    
    st.markdown("""
    ### Benef√≠cios da Assinatura VIP:
    - üéØ Dicas exclusivas com maior taxa de acerto
    - üì± Alertas em tempo real
    - üìä An√°lises mais detalhadas
    - üîî Notifica√ß√µes de oportunidades
    - üí∞ Estrat√©gias de bankroll
    """)
    
    if st.button("Assinar VIP - R$ 29,90/m√™s"):
        st.success("Redirecionando para o pagamento...")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem;">
    <p>‚ö†Ô∏è <strong>Aviso:</strong> Apostas esportivas envolvem riscos. Aposte com responsabilidade.</p>
    <p>üìß Contato: suporte@robotapbrasil.com | üìû (11) 9999-9999</p>
</div>
""", unsafe_allow_html=True)
